import 'package:isar/isar.dart';
import 'package:test/test.dart';

import 'util/common.dart';
import 'util/matchers.dart';
import 'util/sync_async_helper.dart';

part 'id_test.g.dart';

@collection
class ImplicitNullableIdModel {
  Id? id;
}

@collection
class ImplicitFinalIdModel {
  final Id id = Isar.autoIncrement;
}

@collection
class ManualFinalIdModel {
  ManualFinalIdModel(this.id);

  final Id id;
}

void main() {
  group('Id', () {
    late Isar isar;

    setUp(() async {
      isar = await openTempIsar([
        ImplicitNullableIdModelSchema,
        ImplicitFinalIdModelSchema,
        ManualFinalIdModelSchema,
      ]);
    });

    group('Implicit nullable id', () {
      isarTest('Id should auto increment', () async {
        final id1 = await isar.tWriteTxn(
          () => isar.implicitNullableIdModels.tPut(ImplicitNullableIdModel()),
        );
        expect(id1, 1);

        final model = ImplicitNullableIdModel()..id = 2;
        final id2 = await isar.tWriteTxn(
          () => isar.implicitNullableIdModels.tPut(model),
        );
        expect(id2, 2);

        final id3 = await isar.tWriteTxn(
          () => isar.implicitNullableIdModels.tPut(ImplicitNullableIdModel()),
        );
        expect(id3, 3);

        final ids = await isar.tWriteTxn(
          () => isar.implicitNullableIdModels.tPutAll(
            List.generate(6, (_) => ImplicitNullableIdModel()),
          ),
        );
        expect(ids, [4, 5, 6, 7, 8, 9]);

        await qEqual(
          isar.implicitNullableIdModels.where().idProperty(),
          [1, 2, 3, 4, 5, 6, 7, 8, 9],
        );
      });

      isarTest('Assigned id should be persisted', () async {
        final id1 = await isar.tWriteTxn(
          () => isar.implicitNullableIdModels.tPut(ImplicitNullableIdModel()),
        );
        expect(id1, 1);

        final id1Obj = await isar.implicitNullableIdModels
            .where()
            .idEqualTo(id1)
            .tFindFirst();
        expect(id1Obj?.id, id1);

        final model = ImplicitNullableIdModel()..id = 2;
        final id2 = await isar.tWriteTxn(
          () => isar.implicitNullableIdModels.tPut(model),
        );
        expect(id2, 2);

        final id2Obj = await isar.implicitNullableIdModels
            .where()
            .idEqualTo(id2)
            .tFindFirst();
        expect(id2Obj?.id, id2);

        final id3 = await isar.tWriteTxn(
          () => isar.implicitNullableIdModels.tPut(ImplicitNullableIdModel()),
        );
        expect(id3, 3);

        final id3Obj = await isar.implicitNullableIdModels
            .where()
            .idEqualTo(id3)
            .tFindFirst();
        expect(id3Obj?.id, id3);
      });

      isarTest('Auto increment should reset', () async {
        final ids1 = await isar.tWriteTxn(() {
          return isar.implicitNullableIdModels.tPutAll(
            List.generate(10, (_) => ImplicitNullableIdModel()),
          );
        });
        expect(ids1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);

        final id11 = await isar.tWriteTxn(
          () => isar.implicitNullableIdModels.tPut(ImplicitNullableIdModel()),
        );
        expect(id11, 11);

        await isar.tWriteTxn(
          () => isar.implicitNullableIdModels.tClear(),
        );

        final id1 = await isar.tWriteTxn(
          () => isar.implicitNullableIdModels.tPut(ImplicitNullableIdModel()),
        );
        expect(id1, 1);

        final newIds = await isar.tWriteTxn(
          () => isar.implicitNullableIdModels.tPutAll(
            List.generate(5, (index) => ImplicitNullableIdModel()),
          ),
        );
        expect(newIds, [2, 3, 4, 5, 6]);

        await qEqual(
          isar.implicitNullableIdModels.where().idProperty(),
          [1, 2, 3, 4, 5, 6],
        );
      });

      isarTest('Negative id', () async {
        final model = ImplicitNullableIdModel()..id = -10;
        final id = await isar.tWriteTxn(
          () => isar.implicitNullableIdModels.tPut(model),
        );
        expect(id, -10);

        final newModel = await isar.implicitNullableIdModels.tGet(id);
        expect(newModel?.id, id);

        final ids = await isar.tWriteTxn(
          () => isar.implicitNullableIdModels.tPutAll(
            List.generate(16, (_) => ImplicitNullableIdModel()),
          ),
        );
        // Auto increment ids are always positive (minimum 1)
        expect(ids, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);
      });

      isarTest(
        'Auto increment counter should always be the next biggest id',
        () async {
          final id1 = await isar.tWriteTxn(
            () => isar.implicitNullableIdModels.tPut(
              ImplicitNullableIdModel()..id = 1024,
            ),
          );
          expect(id1, 1024);

          final autoGeneratedId1 = await isar.tWriteTxn(
            () => isar.implicitNullableIdModels.tPut(ImplicitNullableIdModel()),
          );
          expect(autoGeneratedId1, 1025);

          final id2 = await isar.tWriteTxn(
            () => isar.implicitNullableIdModels.tPut(
              ImplicitNullableIdModel()..id = 4096,
            ),
          );
          expect(id2, 4096);

          final autoGeneratedId2 = await isar.tWriteTxn(
            () => isar.implicitNullableIdModels.tPut(ImplicitNullableIdModel()),
          );
          expect(autoGeneratedId2, 4097);

          final deleted = await isar.tWriteTxn(
            () => isar.implicitNullableIdModels.tDelete(4097),
          );
          expect(deleted, true);

          final autoGeneratedId3 = await isar.tWriteTxn(
            () => isar.implicitNullableIdModels.tPut(ImplicitNullableIdModel()),
          );
          expect(autoGeneratedId3, 4098);
        },
      );
    });

    group('Implicit final id', () {
      isarTest('Id should auto increment', () async {
        final id1 = await isar.tWriteTxn(
          () => isar.implicitFinalIdModels.tPut(ImplicitFinalIdModel()),
        );
        expect(id1, 1);

        final id2 = await isar.tWriteTxn(
          () => isar.implicitFinalIdModels.tPut(ImplicitFinalIdModel()),
        );
        expect(id2, 2);

        final ids = await isar.tWriteTxn(
          () => isar.implicitFinalIdModels.tPutAll(
            List.generate(6, (_) => ImplicitFinalIdModel()),
          ),
        );
        expect(ids, [3, 4, 5, 6, 7, 8]);

        await qEqual(
          isar.implicitFinalIdModels.where().idProperty(),
          [1, 2, 3, 4, 5, 6, 7, 8],
        );
      });

      isarTest('Assigned id should be persisted', () async {
        // FIXME: final id with value of `Isar.autoIncrement` returns the new
        // id on save, but when re-querying the object, the id is still
        // `Isar.autoIncrement`

        final id1 = await isar.tWriteTxn(
          () => isar.implicitFinalIdModels.tPut(ImplicitFinalIdModel()),
        );
        expect(id1, 1);

        final id1Obj = await isar.implicitFinalIdModels
            .where()
            .idEqualTo(id1)
            .tFindFirst();
        expect(id1Obj?.id, id1);

        final id2 = await isar.tWriteTxn(
          () => isar.implicitFinalIdModels.tPut(ImplicitFinalIdModel()),
        );
        expect(id2, 2);

        final id2Obj = await isar.implicitFinalIdModels
            .where()
            .idEqualTo(id2)
            .tFindFirst();
        expect(id2Obj?.id, id2);
      });
    });

    group('Manual final id', () {
      isarTest('Manually provide id', () async {
        final id4 = await isar.tWriteTxn(
          () => isar.manualFinalIdModels.tPut(ManualFinalIdModel(4)),
        );
        expect(id4, 4);

        final id2 = await isar.tWriteTxn(
          () => isar.manualFinalIdModels.tPut(ManualFinalIdModel(2)),
        );
        expect(id2, 2);

        final ids = await isar.tWriteTxn(
          () => isar.manualFinalIdModels.tPutAll(
            List.generate(6, (index) => ManualFinalIdModel(index + 100)),
          ),
        );
        expect(ids, [100, 101, 102, 103, 104, 105]);

        await qEqual(
          isar.manualFinalIdModels.where().idProperty(),
          [2, 4, 100, 101, 102, 103, 104, 105],
        );
      });

      isarTest('Assigned id should be persisted', () async {
        final id4 = await isar.tWriteTxn(
          () => isar.manualFinalIdModels.tPut(ManualFinalIdModel(4)),
        );
        expect(id4, 4);

        final id4Obj = await isar.manualFinalIdModels
            .where()
            .idEqualTo(id4)
            .tFindFirst();
        expect(id4Obj?.id, id4);

        final id2 = await isar.tWriteTxn(
          () => isar.manualFinalIdModels.tPut(ManualFinalIdModel(2)),
        );
        expect(id2, 2);

        final id2Obj = await isar.manualFinalIdModels
            .where()
            .idEqualTo(id2)
            .tFindFirst();
        expect(id2Obj?.id, id2);
      });
    });
  });
}
