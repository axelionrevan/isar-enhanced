// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class IsarCoreBindings {
  /// Holds the Dynamic library.
  final ffi.DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  IsarCoreBindings(ffi.DynamicLibrary dynamicLibrary) : _dylib = dynamicLibrary;

  ffi.Pointer<ffi.Int8> isar_get_error(
    int err_code,
  ) {
    return (_isar_get_error ??=
        _dylib.lookupFunction<_c_isar_get_error, _dart_isar_get_error>(
            'isar_get_error'))(
      err_code,
    );
  }

  _dart_isar_get_error? _isar_get_error;

  void isar_free_error(
    ffi.Pointer<ffi.Int8> error,
  ) {
    return (_isar_free_error ??=
        _dylib.lookupFunction<_c_isar_free_error, _dart_isar_free_error>(
            'isar_free_error'))(
      error,
    );
  }

  _dart_isar_free_error? _isar_free_error;

  int isar_get(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.NativeType> txn,
    ffi.Pointer<RawObject> object,
  ) {
    return (_isar_get ??=
        _dylib.lookupFunction<_c_isar_get, _dart_isar_get>('isar_get'))(
      collection,
      txn,
      object,
    );
  }

  _dart_isar_get? _isar_get;

  void isar_get_all_async(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.NativeType> txn,
    ffi.Pointer<RawObjectSet> objects,
  ) {
    return (_isar_get_all_async ??=
        _dylib.lookupFunction<_c_isar_get_all_async, _dart_isar_get_all_async>(
            'isar_get_all_async'))(
      collection,
      txn,
      objects,
    );
  }

  _dart_isar_get_all_async? _isar_get_all_async;

  int isar_put(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.NativeType> txn,
    ffi.Pointer<RawObject> object,
  ) {
    return (_isar_put ??=
        _dylib.lookupFunction<_c_isar_put, _dart_isar_put>('isar_put'))(
      collection,
      txn,
      object,
    );
  }

  _dart_isar_put? _isar_put;

  void isar_put_all_async(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.NativeType> txn,
    ffi.Pointer<RawObjectSet> objects,
  ) {
    return (_isar_put_all_async ??=
        _dylib.lookupFunction<_c_isar_put_all_async, _dart_isar_put_all_async>(
            'isar_put_all_async'))(
      collection,
      txn,
      objects,
    );
  }

  _dart_isar_put_all_async? _isar_put_all_async;

  int isar_delete(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.NativeType> txn,
    ffi.Pointer<RawObject> object,
    ffi.Pointer<ffi.Uint8> deleted,
  ) {
    return (_isar_delete ??= _dylib
        .lookupFunction<_c_isar_delete, _dart_isar_delete>('isar_delete'))(
      collection,
      txn,
      object,
      deleted,
    );
  }

  _dart_isar_delete? _isar_delete;

  void isar_delete_all_async(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.NativeType> txn,
    ffi.Pointer<RawObjectSet> objects,
    ffi.Pointer<ffi.Uint32> count,
  ) {
    return (_isar_delete_all_async ??= _dylib.lookupFunction<
        _c_isar_delete_all_async,
        _dart_isar_delete_all_async>('isar_delete_all_async'))(
      collection,
      txn,
      objects,
      count,
    );
  }

  _dart_isar_delete_all_async? _isar_delete_all_async;

  int isar_clear(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.NativeType> txn,
    ffi.Pointer<ffi.Uint32> count,
  ) {
    return (_isar_clear ??=
        _dylib.lookupFunction<_c_isar_clear, _dart_isar_clear>('isar_clear'))(
      collection,
      txn,
      count,
    );
  }

  _dart_isar_clear? _isar_clear;

  void isar_clear_async(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.NativeType> txn,
    ffi.Pointer<ffi.Uint32> count,
  ) {
    return (_isar_clear_async ??=
        _dylib.lookupFunction<_c_isar_clear_async, _dart_isar_clear_async>(
            'isar_clear_async'))(
      collection,
      txn,
      count,
    );
  }

  _dart_isar_clear_async? _isar_clear_async;

  void isar_json_import_async(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.NativeType> txn,
    ffi.Pointer<ffi.Uint8> json_bytes,
    int json_length,
  ) {
    return (_isar_json_import_async ??= _dylib.lookupFunction<
        _c_isar_json_import_async,
        _dart_isar_json_import_async>('isar_json_import_async'))(
      collection,
      txn,
      json_bytes,
      json_length,
    );
  }

  _dart_isar_json_import_async? _isar_json_import_async;

  void isar_json_export_async(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.NativeType> txn,
    bool primitive_null,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> json_bytes,
    ffi.Pointer<ffi.Uint32> json_length,
  ) {
    return (_isar_json_export_async ??= _dylib.lookupFunction<
        _c_isar_json_export_async,
        _dart_isar_json_export_async>('isar_json_export_async'))(
      collection,
      txn,
      primitive_null ? 1 : 0,
      json_bytes,
      json_length,
    );
  }

  _dart_isar_json_export_async? _isar_json_export_async;

  void isar_free_json(
    ffi.Pointer<ffi.Uint8> json_bytes,
    int json_length,
  ) {
    return (_isar_free_json ??=
        _dylib.lookupFunction<_c_isar_free_json, _dart_isar_free_json>(
            'isar_free_json'))(
      json_bytes,
      json_length,
    );
  }

  _dart_isar_free_json? _isar_free_json;

  void isar_connect_dart_api(
    ffi.Pointer<ffi.NativeFunction<DartPostCObjectFnType>> ptr,
  ) {
    return (_isar_connect_dart_api ??= _dylib.lookupFunction<
        _c_isar_connect_dart_api,
        _dart_isar_connect_dart_api>('isar_connect_dart_api'))(
      ptr,
    );
  }

  _dart_isar_connect_dart_api? _isar_connect_dart_api;

  int isar_filter_and_or(
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
    bool and,
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> conditions,
    int length,
  ) {
    return (_isar_filter_and_or ??=
        _dylib.lookupFunction<_c_isar_filter_and_or, _dart_isar_filter_and_or>(
            'isar_filter_and_or'))(
      filter,
      and ? 1 : 0,
      conditions,
      length,
    );
  }

  _dart_isar_filter_and_or? _isar_filter_and_or;

  int isar_filter_not(
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
    ffi.Pointer<ffi.NativeType> condition,
  ) {
    return (_isar_filter_not ??=
        _dylib.lookupFunction<_c_isar_filter_not, _dart_isar_filter_not>(
            'isar_filter_not'))(
      filter,
      condition,
    );
  }

  _dart_isar_filter_not? _isar_filter_not;

  int isar_filter_is_null(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
    int property_index,
  ) {
    return (_isar_filter_is_null ??= _dylib.lookupFunction<
        _c_isar_filter_is_null,
        _dart_isar_filter_is_null>('isar_filter_is_null'))(
      collection,
      filter,
      property_index,
    );
  }

  _dart_isar_filter_is_null? _isar_filter_is_null;

  int isar_filter_byte_between(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
    int lower,
    bool include_lower,
    int upper,
    bool include_upper,
    int property_index,
  ) {
    return (_isar_filter_byte_between ??= _dylib.lookupFunction<
        _c_isar_filter_byte_between,
        _dart_isar_filter_byte_between>('isar_filter_byte_between'))(
      collection,
      filter,
      lower,
      include_lower ? 1 : 0,
      upper,
      include_upper ? 1 : 0,
      property_index,
    );
  }

  _dart_isar_filter_byte_between? _isar_filter_byte_between;

  int isar_filter_int_between(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
    int lower,
    bool include_lower,
    int upper,
    bool include_upper,
    int property_index,
  ) {
    return (_isar_filter_int_between ??= _dylib.lookupFunction<
        _c_isar_filter_int_between,
        _dart_isar_filter_int_between>('isar_filter_int_between'))(
      collection,
      filter,
      lower,
      include_lower ? 1 : 0,
      upper,
      include_upper ? 1 : 0,
      property_index,
    );
  }

  _dart_isar_filter_int_between? _isar_filter_int_between;

  int isar_filter_float_between(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
    double lower,
    bool include_lower,
    double upper,
    bool include_upper,
    int property_index,
  ) {
    return (_isar_filter_float_between ??= _dylib.lookupFunction<
        _c_isar_filter_float_between,
        _dart_isar_filter_float_between>('isar_filter_float_between'))(
      collection,
      filter,
      lower,
      include_lower ? 1 : 0,
      upper,
      include_upper ? 1 : 0,
      property_index,
    );
  }

  _dart_isar_filter_float_between? _isar_filter_float_between;

  int isar_filter_long_between(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
    int lower,
    bool include_lower,
    int upper,
    bool include_upper,
    int property_index,
  ) {
    return (_isar_filter_long_between ??= _dylib.lookupFunction<
        _c_isar_filter_long_between,
        _dart_isar_filter_long_between>('isar_filter_long_between'))(
      collection,
      filter,
      lower,
      include_lower ? 1 : 0,
      upper,
      include_upper ? 1 : 0,
      property_index,
    );
  }

  _dart_isar_filter_long_between? _isar_filter_long_between;

  int isar_filter_double_between(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
    double lower,
    bool include_lower,
    double upper,
    bool include_upper,
    int property_index,
  ) {
    return (_isar_filter_double_between ??= _dylib.lookupFunction<
        _c_isar_filter_double_between,
        _dart_isar_filter_double_between>('isar_filter_double_between'))(
      collection,
      filter,
      lower,
      include_lower ? 1 : 0,
      upper,
      include_upper ? 1 : 0,
      property_index,
    );
  }

  _dart_isar_filter_double_between? _isar_filter_double_between;

  int isar_filter_byte_list_contains(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
    int value,
    int property_index,
  ) {
    return (_isar_filter_byte_list_contains ??= _dylib.lookupFunction<
            _c_isar_filter_byte_list_contains,
            _dart_isar_filter_byte_list_contains>(
        'isar_filter_byte_list_contains'))(
      collection,
      filter,
      value,
      property_index,
    );
  }

  _dart_isar_filter_byte_list_contains? _isar_filter_byte_list_contains;

  int isar_filter_int_list_contains(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
    int value,
    int property_index,
  ) {
    return (_isar_filter_int_list_contains ??= _dylib.lookupFunction<
        _c_isar_filter_int_list_contains,
        _dart_isar_filter_int_list_contains>('isar_filter_int_list_contains'))(
      collection,
      filter,
      value,
      property_index,
    );
  }

  _dart_isar_filter_int_list_contains? _isar_filter_int_list_contains;

  int isar_filter_long_list_contains(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
    int value,
    int property_index,
  ) {
    return (_isar_filter_long_list_contains ??= _dylib.lookupFunction<
            _c_isar_filter_long_list_contains,
            _dart_isar_filter_long_list_contains>(
        'isar_filter_long_list_contains'))(
      collection,
      filter,
      value,
      property_index,
    );
  }

  _dart_isar_filter_long_list_contains? _isar_filter_long_list_contains;

  int isar_filter_string_equal(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
    ffi.Pointer<ffi.Int8> value,
    bool case_sensitive,
    int property_index,
  ) {
    return (_isar_filter_string_equal ??= _dylib.lookupFunction<
        _c_isar_filter_string_equal,
        _dart_isar_filter_string_equal>('isar_filter_string_equal'))(
      collection,
      filter,
      value,
      case_sensitive ? 1 : 0,
      property_index,
    );
  }

  _dart_isar_filter_string_equal? _isar_filter_string_equal;

  int isar_filter_string_starts_with(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
    ffi.Pointer<ffi.Int8> value,
    bool case_sensitive,
    int property_index,
  ) {
    return (_isar_filter_string_starts_with ??= _dylib.lookupFunction<
            _c_isar_filter_string_starts_with,
            _dart_isar_filter_string_starts_with>(
        'isar_filter_string_starts_with'))(
      collection,
      filter,
      value,
      case_sensitive ? 1 : 0,
      property_index,
    );
  }

  _dart_isar_filter_string_starts_with? _isar_filter_string_starts_with;

  int isar_filter_string_ends_with(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
    ffi.Pointer<ffi.Int8> value,
    bool case_sensitive,
    int property_index,
  ) {
    return (_isar_filter_string_ends_with ??= _dylib.lookupFunction<
        _c_isar_filter_string_ends_with,
        _dart_isar_filter_string_ends_with>('isar_filter_string_ends_with'))(
      collection,
      filter,
      value,
      case_sensitive ? 1 : 0,
      property_index,
    );
  }

  _dart_isar_filter_string_ends_with? _isar_filter_string_ends_with;

  int isar_filter_string_matches(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
    ffi.Pointer<ffi.Int8> value,
    bool case_sensitive,
    int property_index,
  ) {
    return (_isar_filter_string_matches ??= _dylib.lookupFunction<
        _c_isar_filter_string_matches,
        _dart_isar_filter_string_matches>('isar_filter_string_matches'))(
      collection,
      filter,
      value,
      case_sensitive ? 1 : 0,
      property_index,
    );
  }

  _dart_isar_filter_string_matches? _isar_filter_string_matches;

  int isar_filter_string_list_contains(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
    ffi.Pointer<ffi.Int8> value,
    bool case_sensitive,
    int property_index,
  ) {
    return (_isar_filter_string_list_contains ??= _dylib.lookupFunction<
            _c_isar_filter_string_list_contains,
            _dart_isar_filter_string_list_contains>(
        'isar_filter_string_list_contains'))(
      collection,
      filter,
      value,
      case_sensitive ? 1 : 0,
      property_index,
    );
  }

  _dart_isar_filter_string_list_contains? _isar_filter_string_list_contains;

  void isar_create_instance(
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> isar,
    ffi.Pointer<ffi.Int8> path,
    int max_size,
    ffi.Pointer<ffi.Int8> schema_json,
    int port,
  ) {
    return (_isar_create_instance ??= _dylib.lookupFunction<
        _c_isar_create_instance,
        _dart_isar_create_instance>('isar_create_instance'))(
      isar,
      path,
      max_size,
      schema_json,
      port,
    );
  }

  _dart_isar_create_instance? _isar_create_instance;

  void isar_get_instance(
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> isar,
    ffi.Pointer<ffi.Int8> path,
  ) {
    return (_isar_get_instance ??=
        _dylib.lookupFunction<_c_isar_get_instance, _dart_isar_get_instance>(
            'isar_get_instance'))(
      isar,
      path,
    );
  }

  _dart_isar_get_instance? _isar_get_instance;

  int isar_get_collection(
    ffi.Pointer<ffi.NativeType> isar,
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> collection,
    int index,
  ) {
    return (_isar_get_collection ??= _dylib.lookupFunction<
        _c_isar_get_collection,
        _dart_isar_get_collection>('isar_get_collection'))(
      isar,
      collection,
      index,
    );
  }

  _dart_isar_get_collection? _isar_get_collection;

  int isar_get_property_offset(
    ffi.Pointer<ffi.NativeType> collection,
    int property_index,
  ) {
    return (_isar_get_property_offset ??= _dylib.lookupFunction<
        _c_isar_get_property_offset,
        _dart_isar_get_property_offset>('isar_get_property_offset'))(
      collection,
      property_index,
    );
  }

  _dart_isar_get_property_offset? _isar_get_property_offset;

  ffi.Pointer<ffi.NativeType> isar_qb_create(
    ffi.Pointer<ffi.NativeType> collection,
  ) {
    return (_isar_qb_create ??=
        _dylib.lookupFunction<_c_isar_qb_create, _dart_isar_qb_create>(
            'isar_qb_create'))(
      collection,
    );
  }

  _dart_isar_qb_create? _isar_qb_create;

  int isar_qb_add_where_clause(
    ffi.Pointer<ffi.NativeType> builder,
    ffi.Pointer<ffi.NativeType> where_clause,
    bool include_lower,
    bool include_upper,
  ) {
    return (_isar_qb_add_where_clause ??= _dylib.lookupFunction<
        _c_isar_qb_add_where_clause,
        _dart_isar_qb_add_where_clause>('isar_qb_add_where_clause'))(
      builder,
      where_clause,
      include_lower ? 1 : 0,
      include_upper ? 1 : 0,
    );
  }

  _dart_isar_qb_add_where_clause? _isar_qb_add_where_clause;

  void isar_qb_set_filter(
    ffi.Pointer<ffi.NativeType> builder,
    ffi.Pointer<ffi.NativeType> filter,
  ) {
    return (_isar_qb_set_filter ??=
        _dylib.lookupFunction<_c_isar_qb_set_filter, _dart_isar_qb_set_filter>(
            'isar_qb_set_filter'))(
      builder,
      filter,
    );
  }

  _dart_isar_qb_set_filter? _isar_qb_set_filter;

  int isar_qb_add_sort_by(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.NativeType> builder,
    int property_index,
    bool asc,
  ) {
    return (_isar_qb_add_sort_by ??= _dylib.lookupFunction<
        _c_isar_qb_add_sort_by,
        _dart_isar_qb_add_sort_by>('isar_qb_add_sort_by'))(
      collection,
      builder,
      property_index,
      asc ? 1 : 0,
    );
  }

  _dart_isar_qb_add_sort_by? _isar_qb_add_sort_by;

  int isar_qb_add_distinct_by(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.NativeType> builder,
    int property_index,
  ) {
    return (_isar_qb_add_distinct_by ??= _dylib.lookupFunction<
        _c_isar_qb_add_distinct_by,
        _dart_isar_qb_add_distinct_by>('isar_qb_add_distinct_by'))(
      collection,
      builder,
      property_index,
    );
  }

  _dart_isar_qb_add_distinct_by? _isar_qb_add_distinct_by;

  int isar_qb_set_offset_limit(
    ffi.Pointer<ffi.NativeType> builder,
    int offset,
    int limit,
  ) {
    return (_isar_qb_set_offset_limit ??= _dylib.lookupFunction<
        _c_isar_qb_set_offset_limit,
        _dart_isar_qb_set_offset_limit>('isar_qb_set_offset_limit'))(
      builder,
      offset,
      limit,
    );
  }

  _dart_isar_qb_set_offset_limit? _isar_qb_set_offset_limit;

  ffi.Pointer<ffi.NativeType> isar_qb_build(
    ffi.Pointer<ffi.NativeType> builder,
  ) {
    return (_isar_qb_build ??=
        _dylib.lookupFunction<_c_isar_qb_build, _dart_isar_qb_build>(
            'isar_qb_build'))(
      builder,
    );
  }

  _dart_isar_qb_build? _isar_qb_build;

  void isar_q_free(
    ffi.Pointer<ffi.NativeType> query,
  ) {
    return (_isar_q_free ??= _dylib
        .lookupFunction<_c_isar_q_free, _dart_isar_q_free>('isar_q_free'))(
      query,
    );
  }

  _dart_isar_q_free? _isar_q_free;

  int isar_q_find(
    ffi.Pointer<ffi.NativeType> query,
    ffi.Pointer<ffi.NativeType> txn,
    ffi.Pointer<RawObjectSet> result,
    int limit,
  ) {
    return (_isar_q_find ??= _dylib
        .lookupFunction<_c_isar_q_find, _dart_isar_q_find>('isar_q_find'))(
      query,
      txn,
      result,
      limit,
    );
  }

  _dart_isar_q_find? _isar_q_find;

  void isar_q_find_async(
    ffi.Pointer<ffi.NativeType> query,
    ffi.Pointer<ffi.NativeType> txn,
    ffi.Pointer<RawObjectSet> result,
    int limit,
  ) {
    return (_isar_q_find_async ??=
        _dylib.lookupFunction<_c_isar_q_find_async, _dart_isar_q_find_async>(
            'isar_q_find_async'))(
      query,
      txn,
      result,
      limit,
    );
  }

  _dart_isar_q_find_async? _isar_q_find_async;

  int isar_q_count(
    ffi.Pointer<ffi.NativeType> query,
    ffi.Pointer<ffi.NativeType> txn,
    ffi.Pointer<ffi.Uint32> count,
  ) {
    return (_isar_q_count ??= _dylib
        .lookupFunction<_c_isar_q_count, _dart_isar_q_count>('isar_q_count'))(
      query,
      txn,
      count,
    );
  }

  _dart_isar_q_count? _isar_q_count;

  void isar_q_count_async(
    ffi.Pointer<ffi.NativeType> query,
    ffi.Pointer<ffi.NativeType> txn,
    ffi.Pointer<ffi.Uint32> count,
  ) {
    return (_isar_q_count_async ??=
        _dylib.lookupFunction<_c_isar_q_count_async, _dart_isar_q_count_async>(
            'isar_q_count_async'))(
      query,
      txn,
      count,
    );
  }

  _dart_isar_q_count_async? _isar_q_count_async;

  int isar_q_delete(
    ffi.Pointer<ffi.NativeType> query,
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.NativeType> txn,
    int limit,
    ffi.Pointer<ffi.Uint32> count,
  ) {
    return (_isar_q_delete ??=
        _dylib.lookupFunction<_c_isar_q_delete, _dart_isar_q_delete>(
            'isar_q_delete'))(
      query,
      collection,
      txn,
      limit,
      count,
    );
  }

  _dart_isar_q_delete? _isar_q_delete;

  void isar_q_delete_async(
    ffi.Pointer<ffi.NativeType> query,
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.NativeType> txn,
    int limit,
    ffi.Pointer<ffi.Uint32> count,
  ) {
    return (_isar_q_delete_async ??= _dylib.lookupFunction<
        _c_isar_q_delete_async,
        _dart_isar_q_delete_async>('isar_q_delete_async'))(
      query,
      collection,
      txn,
      limit,
      count,
    );
  }

  _dart_isar_q_delete_async? _isar_q_delete_async;

  void isar_free_raw_obj_list(
    ffi.Pointer<RawObjectSet> ros,
  ) {
    return (_isar_free_raw_obj_list ??= _dylib.lookupFunction<
        _c_isar_free_raw_obj_list,
        _dart_isar_free_raw_obj_list>('isar_free_raw_obj_list'))(
      ros,
    );
  }

  _dart_isar_free_raw_obj_list? _isar_free_raw_obj_list;

  int isar_txn_begin(
    ffi.Pointer<ffi.NativeType> isar,
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> txn,
    bool write,
  ) {
    return (_isar_txn_begin ??=
        _dylib.lookupFunction<_c_isar_txn_begin, _dart_isar_txn_begin>(
            'isar_txn_begin'))(
      isar,
      txn,
      write ? 1 : 0,
    );
  }

  _dart_isar_txn_begin? _isar_txn_begin;

  void isar_txn_begin_async(
    ffi.Pointer<ffi.NativeType> isar,
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> txn,
    bool write,
    int port,
  ) {
    return (_isar_txn_begin_async ??= _dylib.lookupFunction<
        _c_isar_txn_begin_async,
        _dart_isar_txn_begin_async>('isar_txn_begin_async'))(
      isar,
      txn,
      write ? 1 : 0,
      port,
    );
  }

  _dart_isar_txn_begin_async? _isar_txn_begin_async;

  int isar_txn_commit(
    ffi.Pointer<ffi.NativeType> txn,
  ) {
    return (_isar_txn_commit ??=
        _dylib.lookupFunction<_c_isar_txn_commit, _dart_isar_txn_commit>(
            'isar_txn_commit'))(
      txn,
    );
  }

  _dart_isar_txn_commit? _isar_txn_commit;

  void isar_txn_commit_async(
    ffi.Pointer<ffi.NativeType> txn,
  ) {
    return (_isar_txn_commit_async ??= _dylib.lookupFunction<
        _c_isar_txn_commit_async,
        _dart_isar_txn_commit_async>('isar_txn_commit_async'))(
      txn,
    );
  }

  _dart_isar_txn_commit_async? _isar_txn_commit_async;

  void isar_txn_abort(
    ffi.Pointer<ffi.NativeType> txn,
  ) {
    return (_isar_txn_abort ??=
        _dylib.lookupFunction<_c_isar_txn_abort, _dart_isar_txn_abort>(
            'isar_txn_abort'))(
      txn,
    );
  }

  _dart_isar_txn_abort? _isar_txn_abort;

  void isar_txn_abort_async(
    ffi.Pointer<ffi.NativeType> txn,
  ) {
    return (_isar_txn_abort_async ??= _dylib.lookupFunction<
        _c_isar_txn_abort_async,
        _dart_isar_txn_abort_async>('isar_txn_abort_async'))(
      txn,
    );
  }

  _dart_isar_txn_abort_async? _isar_txn_abort_async;

  ffi.Pointer<ffi.NativeType> isar_watch_collection(
    ffi.Pointer<ffi.NativeType> isar,
    ffi.Pointer<ffi.NativeType> collection,
    int port,
  ) {
    return (_isar_watch_collection ??= _dylib.lookupFunction<
        _c_isar_watch_collection,
        _dart_isar_watch_collection>('isar_watch_collection'))(
      isar,
      collection,
      port,
    );
  }

  _dart_isar_watch_collection? _isar_watch_collection;

  ffi.Pointer<ffi.NativeType> isar_watch_object(
    ffi.Pointer<ffi.NativeType> isar,
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<RawObject> oid,
    int port,
  ) {
    return (_isar_watch_object ??=
        _dylib.lookupFunction<_c_isar_watch_object, _dart_isar_watch_object>(
            'isar_watch_object'))(
      isar,
      collection,
      oid,
      port,
    );
  }

  _dart_isar_watch_object? _isar_watch_object;

  ffi.Pointer<ffi.NativeType> isar_watch_query(
    ffi.Pointer<ffi.NativeType> isar,
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.NativeType> query,
    int port,
  ) {
    return (_isar_watch_query ??=
        _dylib.lookupFunction<_c_isar_watch_query, _dart_isar_watch_query>(
            'isar_watch_query'))(
      isar,
      collection,
      query,
      port,
    );
  }

  _dart_isar_watch_query? _isar_watch_query;

  void isar_stop_watching(
    ffi.Pointer<ffi.NativeType> handle,
  ) {
    return (_isar_stop_watching ??=
        _dylib.lookupFunction<_c_isar_stop_watching, _dart_isar_stop_watching>(
            'isar_stop_watching'))(
      handle,
    );
  }

  _dart_isar_stop_watching? _isar_stop_watching;

  int isar_wc_create(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> wc,
    bool primary,
    int index_index,
    bool skip_duplicates,
  ) {
    return (_isar_wc_create ??=
        _dylib.lookupFunction<_c_isar_wc_create, _dart_isar_wc_create>(
            'isar_wc_create'))(
      collection,
      wc,
      primary ? 1 : 0,
      index_index,
      skip_duplicates ? 1 : 0,
    );
  }

  _dart_isar_wc_create? _isar_wc_create;

  void isar_wc_add_byte(
    ffi.Pointer<ffi.NativeType> where_clause,
    int lower,
    int upper,
  ) {
    return (_isar_wc_add_byte ??=
        _dylib.lookupFunction<_c_isar_wc_add_byte, _dart_isar_wc_add_byte>(
            'isar_wc_add_byte'))(
      where_clause,
      lower,
      upper,
    );
  }

  _dart_isar_wc_add_byte? _isar_wc_add_byte;

  void isar_wc_add_int(
    ffi.Pointer<ffi.NativeType> where_clause,
    int lower,
    int upper,
  ) {
    return (_isar_wc_add_int ??=
        _dylib.lookupFunction<_c_isar_wc_add_int, _dart_isar_wc_add_int>(
            'isar_wc_add_int'))(
      where_clause,
      lower,
      upper,
    );
  }

  _dart_isar_wc_add_int? _isar_wc_add_int;

  void isar_wc_add_float(
    ffi.Pointer<ffi.NativeType> where_clause,
    double lower,
    double upper,
  ) {
    return (_isar_wc_add_float ??=
        _dylib.lookupFunction<_c_isar_wc_add_float, _dart_isar_wc_add_float>(
            'isar_wc_add_float'))(
      where_clause,
      lower,
      upper,
    );
  }

  _dart_isar_wc_add_float? _isar_wc_add_float;

  void isar_wc_add_long(
    ffi.Pointer<ffi.NativeType> where_clause,
    int lower,
    int upper,
  ) {
    return (_isar_wc_add_long ??=
        _dylib.lookupFunction<_c_isar_wc_add_long, _dart_isar_wc_add_long>(
            'isar_wc_add_long'))(
      where_clause,
      lower,
      upper,
    );
  }

  _dart_isar_wc_add_long? _isar_wc_add_long;

  void isar_wc_add_double(
    ffi.Pointer<ffi.NativeType> where_clause,
    double lower,
    double upper,
  ) {
    return (_isar_wc_add_double ??=
        _dylib.lookupFunction<_c_isar_wc_add_double, _dart_isar_wc_add_double>(
            'isar_wc_add_double'))(
      where_clause,
      lower,
      upper,
    );
  }

  _dart_isar_wc_add_double? _isar_wc_add_double;

  void isar_wc_add_string_hash(
    ffi.Pointer<ffi.NativeType> where_clause,
    ffi.Pointer<ffi.Int8> value,
    bool case_sensitive,
  ) {
    return (_isar_wc_add_string_hash ??= _dylib.lookupFunction<
        _c_isar_wc_add_string_hash,
        _dart_isar_wc_add_string_hash>('isar_wc_add_string_hash'))(
      where_clause,
      value,
      case_sensitive ? 1 : 0,
    );
  }

  _dart_isar_wc_add_string_hash? _isar_wc_add_string_hash;

  void isar_wc_add_string_value(
    ffi.Pointer<ffi.NativeType> where_clause,
    ffi.Pointer<ffi.Int8> lower,
    ffi.Pointer<ffi.Int8> upper,
    bool case_sensitive,
  ) {
    return (_isar_wc_add_string_value ??= _dylib.lookupFunction<
        _c_isar_wc_add_string_value,
        _dart_isar_wc_add_string_value>('isar_wc_add_string_value'))(
      where_clause,
      lower,
      upper,
      case_sensitive ? 1 : 0,
    );
  }

  _dart_isar_wc_add_string_value? _isar_wc_add_string_value;

  void isar_wc_add_string_word(
    ffi.Pointer<ffi.NativeType> where_clause,
    ffi.Pointer<ffi.Int8> lower,
    ffi.Pointer<ffi.Int8> upper,
    bool case_sensitive,
  ) {
    return (_isar_wc_add_string_word ??= _dylib.lookupFunction<
        _c_isar_wc_add_string_word,
        _dart_isar_wc_add_string_word>('isar_wc_add_string_word'))(
      where_clause,
      lower,
      upper,
      case_sensitive ? 1 : 0,
    );
  }

  _dart_isar_wc_add_string_word? _isar_wc_add_string_word;

  void isar_wc_add_oid_string(
    ffi.Pointer<ffi.NativeType> where_clause,
    ffi.Pointer<ffi.Int8> lower,
    ffi.Pointer<ffi.Int8> upper,
  ) {
    return (_isar_wc_add_oid_string ??= _dylib.lookupFunction<
        _c_isar_wc_add_oid_string,
        _dart_isar_wc_add_oid_string>('isar_wc_add_oid_string'))(
      where_clause,
      lower,
      upper,
    );
  }

  _dart_isar_wc_add_oid_string? _isar_wc_add_oid_string;
}

abstract class RawObject extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> oid_str;

  @ffi.Uint32()
  external int oid_str_length;

  @ffi.Int64()
  external int oid_num;

  external ffi.Pointer<ffi.Uint8> buffer;

  @ffi.Uint32()
  external int buffer_length;
}

class RawObjectSet extends ffi.Struct {
  external ffi.Pointer<RawObject> objects;

  @ffi.Uint32()
  external int length;
}

typedef _c_isar_get_error = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 err_code,
);

typedef _dart_isar_get_error = ffi.Pointer<ffi.Int8> Function(
  int err_code,
);

typedef _c_isar_free_error = ffi.Void Function(
  ffi.Pointer<ffi.Int8> error,
);

typedef _dart_isar_free_error = void Function(
  ffi.Pointer<ffi.Int8> error,
);

typedef _c_isar_get = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<RawObject> object,
);

typedef _dart_isar_get = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<RawObject> object,
);

typedef _c_isar_get_all_async = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<RawObjectSet> objects,
);

typedef _dart_isar_get_all_async = void Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<RawObjectSet> objects,
);

typedef _c_isar_put = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<RawObject> object,
);

typedef _dart_isar_put = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<RawObject> object,
);

typedef _c_isar_put_all_async = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<RawObjectSet> objects,
);

typedef _dart_isar_put_all_async = void Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<RawObjectSet> objects,
);

typedef _c_isar_delete = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<RawObject> object,
  ffi.Pointer<ffi.Uint8> deleted,
);

typedef _dart_isar_delete = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<RawObject> object,
  ffi.Pointer<ffi.Uint8> deleted,
);

typedef _c_isar_delete_all_async = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<RawObjectSet> objects,
  ffi.Pointer<ffi.Uint32> count,
);

typedef _dart_isar_delete_all_async = void Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<RawObjectSet> objects,
  ffi.Pointer<ffi.Uint32> count,
);

typedef _c_isar_clear = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<ffi.Uint32> count,
);

typedef _dart_isar_clear = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<ffi.Uint32> count,
);

typedef _c_isar_clear_async = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<ffi.Uint32> count,
);

typedef _dart_isar_clear_async = void Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<ffi.Uint32> count,
);

typedef _c_isar_json_import_async = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<ffi.Uint8> json_bytes,
  ffi.Uint32 json_length,
);

typedef _dart_isar_json_import_async = void Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<ffi.Uint8> json_bytes,
  int json_length,
);

typedef _c_isar_json_export_async = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Uint8 primitive_null,
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> json_bytes,
  ffi.Pointer<ffi.Uint32> json_length,
);

typedef _dart_isar_json_export_async = void Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  int primitive_null,
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> json_bytes,
  ffi.Pointer<ffi.Uint32> json_length,
);

typedef _c_isar_free_json = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> json_bytes,
  ffi.Uint32 json_length,
);

typedef _dart_isar_free_json = void Function(
  ffi.Pointer<ffi.Uint8> json_bytes,
  int json_length,
);

typedef DartPostCObjectFnType = ffi.Int8 Function(
  ffi.Int64,
  ffi.Pointer<ffi.Dart_CObject>,
);

typedef _c_isar_connect_dart_api = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<DartPostCObjectFnType>> ptr,
);

typedef _dart_isar_connect_dart_api = void Function(
  ffi.Pointer<ffi.NativeFunction<DartPostCObjectFnType>> ptr,
);

typedef _c_isar_filter_and_or = ffi.Uint8 Function(
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Uint8 and,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> conditions,
  ffi.Uint32 length,
);

typedef _dart_isar_filter_and_or = int Function(
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  int and,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> conditions,
  int length,
);

typedef _c_isar_filter_not = ffi.Uint8 Function(
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Pointer<ffi.NativeType> condition,
);

typedef _dart_isar_filter_not = int Function(
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Pointer<ffi.NativeType> condition,
);

typedef _c_isar_filter_is_null = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Uint32 property_index,
);

typedef _dart_isar_filter_is_null = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  int property_index,
);

typedef _c_isar_filter_byte_between = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Uint8 lower,
  ffi.Uint8 include_lower,
  ffi.Uint8 upper,
  ffi.Uint8 include_upper,
  ffi.Uint32 property_index,
);

typedef _dart_isar_filter_byte_between = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  int lower,
  int include_lower,
  int upper,
  int include_upper,
  int property_index,
);

typedef _c_isar_filter_int_between = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Int32 lower,
  ffi.Uint8 include_lower,
  ffi.Int32 upper,
  ffi.Uint8 include_upper,
  ffi.Uint32 property_index,
);

typedef _dart_isar_filter_int_between = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  int lower,
  int include_lower,
  int upper,
  int include_upper,
  int property_index,
);

typedef _c_isar_filter_float_between = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Float lower,
  ffi.Uint8 include_lower,
  ffi.Float upper,
  ffi.Uint8 include_upper,
  ffi.Uint32 property_index,
);

typedef _dart_isar_filter_float_between = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  double lower,
  int include_lower,
  double upper,
  int include_upper,
  int property_index,
);

typedef _c_isar_filter_long_between = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Int64 lower,
  ffi.Uint8 include_lower,
  ffi.Int64 upper,
  ffi.Uint8 include_upper,
  ffi.Uint32 property_index,
);

typedef _dart_isar_filter_long_between = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  int lower,
  int include_lower,
  int upper,
  int include_upper,
  int property_index,
);

typedef _c_isar_filter_double_between = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Double lower,
  ffi.Uint8 include_lower,
  ffi.Double upper,
  ffi.Uint8 include_upper,
  ffi.Uint32 property_index,
);

typedef _dart_isar_filter_double_between = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  double lower,
  int include_lower,
  double upper,
  int include_upper,
  int property_index,
);

typedef _c_isar_filter_byte_list_contains = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Uint8 value,
  ffi.Uint32 property_index,
);

typedef _dart_isar_filter_byte_list_contains = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  int value,
  int property_index,
);

typedef _c_isar_filter_int_list_contains = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Int32 value,
  ffi.Uint32 property_index,
);

typedef _dart_isar_filter_int_list_contains = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  int value,
  int property_index,
);

typedef _c_isar_filter_long_list_contains = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Int64 value,
  ffi.Uint32 property_index,
);

typedef _dart_isar_filter_long_list_contains = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  int value,
  int property_index,
);

typedef _c_isar_filter_string_equal = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Pointer<ffi.Int8> value,
  ffi.Uint8 case_sensitive,
  ffi.Uint32 property_index,
);

typedef _dart_isar_filter_string_equal = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Pointer<ffi.Int8> value,
  int case_sensitive,
  int property_index,
);

typedef _c_isar_filter_string_starts_with = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Pointer<ffi.Int8> value,
  ffi.Uint8 case_sensitive,
  ffi.Uint32 property_index,
);

typedef _dart_isar_filter_string_starts_with = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Pointer<ffi.Int8> value,
  int case_sensitive,
  int property_index,
);

typedef _c_isar_filter_string_ends_with = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Pointer<ffi.Int8> value,
  ffi.Uint8 case_sensitive,
  ffi.Uint32 property_index,
);

typedef _dart_isar_filter_string_ends_with = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Pointer<ffi.Int8> value,
  int case_sensitive,
  int property_index,
);

typedef _c_isar_filter_string_matches = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Pointer<ffi.Int8> value,
  ffi.Uint8 case_sensitive,
  ffi.Uint32 property_index,
);

typedef _dart_isar_filter_string_matches = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Pointer<ffi.Int8> value,
  int case_sensitive,
  int property_index,
);

typedef _c_isar_filter_string_list_contains = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Pointer<ffi.Int8> value,
  ffi.Uint8 case_sensitive,
  ffi.Uint32 property_index,
);

typedef _dart_isar_filter_string_list_contains = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Pointer<ffi.Int8> value,
  int case_sensitive,
  int property_index,
);

typedef _c_isar_create_instance = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> isar,
  ffi.Pointer<ffi.Int8> path,
  ffi.Int64 max_size,
  ffi.Pointer<ffi.Int8> schema_json,
  ffi.Int64 port,
);

typedef _dart_isar_create_instance = void Function(
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> isar,
  ffi.Pointer<ffi.Int8> path,
  int max_size,
  ffi.Pointer<ffi.Int8> schema_json,
  int port,
);

typedef _c_isar_get_instance = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> isar,
  ffi.Pointer<ffi.Int8> path,
);

typedef _dart_isar_get_instance = void Function(
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> isar,
  ffi.Pointer<ffi.Int8> path,
);

typedef _c_isar_get_collection = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> isar,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> collection,
  ffi.Uint32 index,
);

typedef _dart_isar_get_collection = int Function(
  ffi.Pointer<ffi.NativeType> isar,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> collection,
  int index,
);

typedef _c_isar_get_property_offset = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Uint32 property_index,
);

typedef _dart_isar_get_property_offset = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  int property_index,
);

typedef _c_isar_qb_create = ffi.Pointer<ffi.NativeType> Function(
  ffi.Pointer<ffi.NativeType> collection,
);

typedef _dart_isar_qb_create = ffi.Pointer<ffi.NativeType> Function(
  ffi.Pointer<ffi.NativeType> collection,
);

typedef _c_isar_qb_add_where_clause = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> builder,
  ffi.Pointer<ffi.NativeType> where_clause,
  ffi.Uint8 include_lower,
  ffi.Uint8 include_upper,
);

typedef _dart_isar_qb_add_where_clause = int Function(
  ffi.Pointer<ffi.NativeType> builder,
  ffi.Pointer<ffi.NativeType> where_clause,
  int include_lower,
  int include_upper,
);

typedef _c_isar_qb_set_filter = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> builder,
  ffi.Pointer<ffi.NativeType> filter,
);

typedef _dart_isar_qb_set_filter = void Function(
  ffi.Pointer<ffi.NativeType> builder,
  ffi.Pointer<ffi.NativeType> filter,
);

typedef _c_isar_qb_add_sort_by = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> builder,
  ffi.Uint32 property_index,
  ffi.Uint8 asc,
);

typedef _dart_isar_qb_add_sort_by = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> builder,
  int property_index,
  int asc,
);

typedef _c_isar_qb_add_distinct_by = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> builder,
  ffi.Uint32 property_index,
);

typedef _dart_isar_qb_add_distinct_by = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> builder,
  int property_index,
);

typedef _c_isar_qb_set_offset_limit = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> builder,
  ffi.Int64 offset,
  ffi.Int64 limit,
);

typedef _dart_isar_qb_set_offset_limit = int Function(
  ffi.Pointer<ffi.NativeType> builder,
  int offset,
  int limit,
);

typedef _c_isar_qb_build = ffi.Pointer<ffi.NativeType> Function(
  ffi.Pointer<ffi.NativeType> builder,
);

typedef _dart_isar_qb_build = ffi.Pointer<ffi.NativeType> Function(
  ffi.Pointer<ffi.NativeType> builder,
);

typedef _c_isar_q_free = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> query,
);

typedef _dart_isar_q_free = void Function(
  ffi.Pointer<ffi.NativeType> query,
);

typedef _c_isar_q_find = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> query,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<RawObjectSet> result,
  ffi.Uint32 limit,
);

typedef _dart_isar_q_find = int Function(
  ffi.Pointer<ffi.NativeType> query,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<RawObjectSet> result,
  int limit,
);

typedef _c_isar_q_find_async = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> query,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<RawObjectSet> result,
  ffi.Uint32 limit,
);

typedef _dart_isar_q_find_async = void Function(
  ffi.Pointer<ffi.NativeType> query,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<RawObjectSet> result,
  int limit,
);

typedef _c_isar_q_count = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> query,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<ffi.Uint32> count,
);

typedef _dart_isar_q_count = int Function(
  ffi.Pointer<ffi.NativeType> query,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<ffi.Uint32> count,
);

typedef _c_isar_q_count_async = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> query,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<ffi.Uint32> count,
);

typedef _dart_isar_q_count_async = void Function(
  ffi.Pointer<ffi.NativeType> query,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<ffi.Uint32> count,
);

typedef _c_isar_q_delete = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> query,
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Uint32 limit,
  ffi.Pointer<ffi.Uint32> count,
);

typedef _dart_isar_q_delete = int Function(
  ffi.Pointer<ffi.NativeType> query,
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  int limit,
  ffi.Pointer<ffi.Uint32> count,
);

typedef _c_isar_q_delete_async = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> query,
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Uint32 limit,
  ffi.Pointer<ffi.Uint32> count,
);

typedef _dart_isar_q_delete_async = void Function(
  ffi.Pointer<ffi.NativeType> query,
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  int limit,
  ffi.Pointer<ffi.Uint32> count,
);

typedef _c_isar_free_raw_obj_list = ffi.Void Function(
  ffi.Pointer<RawObjectSet> ros,
);

typedef _dart_isar_free_raw_obj_list = void Function(
  ffi.Pointer<RawObjectSet> ros,
);

typedef _c_isar_txn_begin = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> isar,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> txn,
  ffi.Uint8 write,
);

typedef _dart_isar_txn_begin = int Function(
  ffi.Pointer<ffi.NativeType> isar,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> txn,
  int write,
);

typedef _c_isar_txn_begin_async = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> isar,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> txn,
  ffi.Uint8 write,
  ffi.Int64 port,
);

typedef _dart_isar_txn_begin_async = void Function(
  ffi.Pointer<ffi.NativeType> isar,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> txn,
  int write,
  int port,
);

typedef _c_isar_txn_commit = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> txn,
);

typedef _dart_isar_txn_commit = int Function(
  ffi.Pointer<ffi.NativeType> txn,
);

typedef _c_isar_txn_commit_async = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> txn,
);

typedef _dart_isar_txn_commit_async = void Function(
  ffi.Pointer<ffi.NativeType> txn,
);

typedef _c_isar_txn_abort = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> txn,
);

typedef _dart_isar_txn_abort = void Function(
  ffi.Pointer<ffi.NativeType> txn,
);

typedef _c_isar_txn_abort_async = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> txn,
);

typedef _dart_isar_txn_abort_async = void Function(
  ffi.Pointer<ffi.NativeType> txn,
);

typedef _c_isar_watch_collection = ffi.Pointer<ffi.NativeType> Function(
  ffi.Pointer<ffi.NativeType> isar,
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Int64 port,
);

typedef _dart_isar_watch_collection = ffi.Pointer<ffi.NativeType> Function(
  ffi.Pointer<ffi.NativeType> isar,
  ffi.Pointer<ffi.NativeType> collection,
  int port,
);

typedef _c_isar_watch_object = ffi.Pointer<ffi.NativeType> Function(
  ffi.Pointer<ffi.NativeType> isar,
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<RawObject> oid,
  ffi.Int64 port,
);

typedef _dart_isar_watch_object = ffi.Pointer<ffi.NativeType> Function(
  ffi.Pointer<ffi.NativeType> isar,
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<RawObject> oid,
  int port,
);

typedef _c_isar_watch_query = ffi.Pointer<ffi.NativeType> Function(
  ffi.Pointer<ffi.NativeType> isar,
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> query,
  ffi.Int64 port,
);

typedef _dart_isar_watch_query = ffi.Pointer<ffi.NativeType> Function(
  ffi.Pointer<ffi.NativeType> isar,
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> query,
  int port,
);

typedef _c_isar_stop_watching = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> handle,
);

typedef _dart_isar_stop_watching = void Function(
  ffi.Pointer<ffi.NativeType> handle,
);

typedef _c_isar_wc_create = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> wc,
  ffi.Uint8 primary,
  ffi.Uint32 index_index,
  ffi.Uint8 skip_duplicates,
);

typedef _dart_isar_wc_create = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> wc,
  int primary,
  int index_index,
  int skip_duplicates,
);

typedef _c_isar_wc_add_byte = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> where_clause,
  ffi.Uint8 lower,
  ffi.Uint8 upper,
);

typedef _dart_isar_wc_add_byte = void Function(
  ffi.Pointer<ffi.NativeType> where_clause,
  int lower,
  int upper,
);

typedef _c_isar_wc_add_int = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> where_clause,
  ffi.Int32 lower,
  ffi.Int32 upper,
);

typedef _dart_isar_wc_add_int = void Function(
  ffi.Pointer<ffi.NativeType> where_clause,
  int lower,
  int upper,
);

typedef _c_isar_wc_add_float = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> where_clause,
  ffi.Float lower,
  ffi.Float upper,
);

typedef _dart_isar_wc_add_float = void Function(
  ffi.Pointer<ffi.NativeType> where_clause,
  double lower,
  double upper,
);

typedef _c_isar_wc_add_long = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> where_clause,
  ffi.Int64 lower,
  ffi.Int64 upper,
);

typedef _dart_isar_wc_add_long = void Function(
  ffi.Pointer<ffi.NativeType> where_clause,
  int lower,
  int upper,
);

typedef _c_isar_wc_add_double = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> where_clause,
  ffi.Double lower,
  ffi.Double upper,
);

typedef _dart_isar_wc_add_double = void Function(
  ffi.Pointer<ffi.NativeType> where_clause,
  double lower,
  double upper,
);

typedef _c_isar_wc_add_string_hash = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> where_clause,
  ffi.Pointer<ffi.Int8> value,
  ffi.Uint8 case_sensitive,
);

typedef _dart_isar_wc_add_string_hash = void Function(
  ffi.Pointer<ffi.NativeType> where_clause,
  ffi.Pointer<ffi.Int8> value,
  int case_sensitive,
);

typedef _c_isar_wc_add_string_value = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> where_clause,
  ffi.Pointer<ffi.Int8> lower,
  ffi.Pointer<ffi.Int8> upper,
  ffi.Uint8 case_sensitive,
);

typedef _dart_isar_wc_add_string_value = void Function(
  ffi.Pointer<ffi.NativeType> where_clause,
  ffi.Pointer<ffi.Int8> lower,
  ffi.Pointer<ffi.Int8> upper,
  int case_sensitive,
);

typedef _c_isar_wc_add_string_word = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> where_clause,
  ffi.Pointer<ffi.Int8> lower,
  ffi.Pointer<ffi.Int8> upper,
  ffi.Uint8 case_sensitive,
);

typedef _dart_isar_wc_add_string_word = void Function(
  ffi.Pointer<ffi.NativeType> where_clause,
  ffi.Pointer<ffi.Int8> lower,
  ffi.Pointer<ffi.Int8> upper,
  int case_sensitive,
);

typedef _c_isar_wc_add_oid_string = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> where_clause,
  ffi.Pointer<ffi.Int8> lower,
  ffi.Pointer<ffi.Int8> upper,
);

typedef _dart_isar_wc_add_oid_string = void Function(
  ffi.Pointer<ffi.NativeType> where_clause,
  ffi.Pointer<ffi.Int8> lower,
  ffi.Pointer<ffi.Int8> upper,
);
